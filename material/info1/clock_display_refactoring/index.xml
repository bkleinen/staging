<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ClockDisplay Example: Reflections and Improvements on STAGING --- Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/</link><description>Recent content in ClockDisplay Example: Reflections and Improvements on STAGING --- Prof. Dr. Barne Kleinen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Design of the Original ClockDisplay Example</title><link>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/original_clock_display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/original_clock_display/</guid><description>up next&amp;gt; The ClockDisplay project is the first example for solving a problem using communicating objects. (in the Book &amp;ldquo;Objects First with Java: A Practical Introduction Using Bluej.&amp;rdquo; by David J Barnes and Michael KÃ¶lling)
Here&amp;rsquo;s a class diagram with the private fields and public methods (Constructors are omitted for clarity):
%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#f0cd91', 'primaryTextColor': '#000', 'primaryBorderColor': '#000', 'lineColor': '#F8B229', 'secondaryColor': '#006100', 'tertiaryColor': '#fff' } } }%% classDiagram class ClockDisplay class NumberDisplay ClockDisplay .</description></item><item><title>ClockDisplay Critique</title><link>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/clock_display_critique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/clock_display_critique/</guid><description>&amp;lt;prev up next&amp;gt; The ClockDisplay aims at showing object interaction, which it does.
The problems I see are: it mixes Model and Representation. Furthermore, the Model or more simply put the stored state, which is the time the clocks shows at the moment, is distributed between three objects - a NumberDisplay for hours and minutes respectively, and the ClockDisplay holding the knowledge how to combine the two.
also, the construction of the displayString is distributed between all objects - see the updateDisplay() part of the timeTick sequence diagram.</description></item><item><title>A very simple ClockDisplay</title><link>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/simple_clock_display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/simple_clock_display/</guid><description>&amp;lt;prev up next&amp;gt; All the ClockDisplay example really does is returning a String like &amp;ldquo;13:45&amp;rdquo; from getTime() after either the time has been set to 13:45 by calling setTime() or after calling the timeTick() method the appropriate amount of times.
This can, of course, be implemented in a much simpler way. While this may be true for most of the small examples we use for programming and software engineering classes, I feel that the way the display is split into two NumberDisplays in combination with the timeTick / increment makes little sense and seems to be quite confusing for students.</description></item><item><title>Kara ClockDisplays</title><link>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/kara-clock-display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/material/info1/clock_display_refactoring/kara-clock-display/</guid><description>&amp;lt;prev up &amp;hellip; not yet here, see KaraClock Exercises for now</description></item></channel></rss>