<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Info3 - Labs and Exercises on STAGING --- Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/</link><description>Recent content in Info3 - Labs and Exercises on STAGING --- Prof. Dr. Barne Kleinen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/staging/classes/ss2023/info3/labs/index.xml" rel="self" type="application/rss+xml"/><item><title>1 - Lab Startup</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-01-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-01-startup/</guid><description>Nerd Workplace. Foto by slworking2
This Startup Lab is about installing the tools you need for Python Programming and getting some (more) hands-on experience with git, so start with that. If bored, move on to try python.
Which Computer to use? In my experience, all Students prefer to use their own computers, which is possible as all Software we&amp;rsquo;ll use and need is free to use (at least for Students).</description></item><item><title>2 - Learning Python</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-02-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-02-python/</guid><description>As always, you need to prepare a report together and each hand in this same report in moodle.
Part 1: Python Learning with Unit Tests Continue the collaborative work on the Python Learning Repository: https://github.com/htw-imi-info3/python-learning.
** note that you need write permissions for the repository! I&amp;rsquo;ll add everyone to the team on github in the labs. **
This part can be done together, but each person must have their own topic/file and each one must commit a new file to the repo and review two other files.</description></item><item><title>3 - Python Project</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-03-pythonproject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-03-pythonproject/</guid><description>As always, you need to prepare a report together and each hand in this same report in moodle.
The Report should contain:
names of all team members a log of what you did notes of commands used &amp;amp; learned references to sources used encountered issues and the solutions found or why you gave up on something - see below a brief overall reflection on the lab. This can be done together or individually.</description></item><item><title>4 - Use Cases and Class Diagrams Part I</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-04-usecases-classdiagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-04-usecases-classdiagrams/</guid><description>Foto by Marvin Meyer
Pre-Lab 1. Know what the lab is about In this exercise you will do the first part of working on a
Use Case Diagram Scenarios A Class Diagram for an application called &amp;ldquo;StudyPartner&amp;rdquo;. 2. Study Partner App The Product Manager has asked you to design and develop the app for IMI:
Study Partner is planned to be an application where IMI-Students can find and meet fellow IMI-Students for various kinds of joint study activities.</description></item><item><title>5 - Use Cases and Class Diagrams Part II</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-05-usecases-classdiagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-05-usecases-classdiagrams/</guid><description>This is part 2 - refer to Part 1 for the assignment.
Don&amp;rsquo;t worry too much about the differentiation of Part 1 and 2, just add missing parts and refine your design based on what you&amp;rsquo;ve learned.
Depending on the reviews of Part1, additional guidance might be added here.
Results Submission Hand in a lab report (including your diagrams) More info on the Labs page.</description></item><item><title>6 - Sequence Diagrams</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-06-sequence-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-06-sequence-diagrams/</guid><description>Pelican launch sequence. Foto by Don McCullough Pre-Lab Read Martin Fowler&amp;rsquo;s Chapter about Sequence Diagrams from the book &amp;ldquo;UML Distilled&amp;rdquo; is available as a sample chapter online. Assignment Part 1: Sequence Diagrams of Known Classes As an introductionary exercise for Sequence Diagrams, pick one of the following example projects from Info1 and draw a sequence diagram for the main use case:
The Clock Display / Use case: timeTick() is called Tech Support / Use case: user command is entered (start() methodin SupportSystem) The Zuul Project / Use case: user enters command (method: play() in Game.</description></item><item><title>7 - Testing</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-07-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-07-testing/</guid><description>Test Button in Car. Foto by Mike Roberts
Pre-Lab 1. Read about Closed and Open Box Tests. I chose &amp;ldquo;Closed and Open Box Tests&amp;rdquo; as a more inclusive replacement for the terms &amp;ldquo;closed and open Box&amp;rdquo; Tests as they are also a better, while still similar metaphor for the strategies they name:
Closed Box Testing is a strategy to find Test Cases without the need to (or beeing able to) look in the Software-Box, that is, usually guided by the specification and the in- and outputs of a system.</description></item><item><title>9 - State Machine Diagrams</title><link>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-09-state-machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/staging/classes/ss2023/info3/labs/lab-09-state-machines/</guid><description>Tape of a fancy Turing Machine from Wikipedia
Pre-Lab For an introduction to state machine diagrams, see https://www.agilemodeling.com/artifacts/stateMachineDiagram.htm.
for the parser exercise, have a look at Finite Automata - in their context of formal languages their typical event is reading a character from an input stream, and can be (and usually are) represented by state machine diagrams.
Part 1: State Machine Diagrams Model the modified goat/cabbage/wolf problem: The farmer is in Schöneweide and wants to get his goat, his cabbage and his wolf over to Oberschöneweide.</description></item></channel></rss>